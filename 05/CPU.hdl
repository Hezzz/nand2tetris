// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // CPU: Instruction Handling
    // If op-code is 0, it is an A instruction; put value to A register
    // else it is C instruction
	  Mux16(a=instruction, b=outALU, sel=instruction[15], out=toARegister);
    // Load to A register in the following conditions
    // If op-code is 0; If op-code is 1 and dest for A register is 1
    //                                      (instruction[5]) 
    Not(in=instruction[15], out=isA);
    Or(a=isA, b=instruction[5], out=toLoadA);
    // Load to A register given the conditions
    ARegister(in=toARegister, load=toLoadA, out=outARegister, out[0..14]=addressM);
    // Check if op-code is a C instruction and check
    // if output should be from M or from A register
    And(a=instruction[15], b=instruction[12], out=isC);
    Mux16(a=outARegister, b=inM, sel=isC, out=AorM);
    // Load to D register
    // If op-code is C instruction and dest is D
    And(a=instruction[15], b=instruction[4], out=toLoadD);
    DRegister(in=outALU, load=toLoadD, out=OutDRegister);
    
    // Run ALU operations
    ALU(x=OutDRegister, y=AorM, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=outM, out=outALU, zr=zr, ng=ng);
    
    // Write to M if C instruction
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // CPU: Control
    // Negate ng if ALU output is positive (or not if output is 0)
    Xor(a=ng, b=zr, out=pos);
    Not(in=pos, out=pt);
    // Get first 3 bits of instruction; compare bits
    // to zr and ng bits; if any of the condition is true, PC will jump
    // to next instruction address from A register:
    // j1 is true if output is negative
    // j2 is true if output is zero
    // j3 is true if output is positive
    And(a=instruction[2], b=ng, out=j1);
    And(a=instruction[1], b=zr, out=j2);
    And(a=instruction[0], b=pt, out=j3);
    // Check if any of the conditions is true
    Or(a=j1, b=j2, out=jx);
    Or(a=jx, b=j3, out=jy);
    // Only do jump if op-code is C instruction
    And(a=instruction[15], b=jy, out=jump);
    // Negate if instruction is to increment PC
    Not(in=jump, out=noJump);
    PC(in=outARegister, 
        load=jump, 
        inc=noJump, 
        reset=reset, 
        out[0..14]=pc);
}